# Copyright 2020 Dell Boomi. All rights reserved.

{% import "path_utils.jinja" as path_utils with context %}

{% set project = env["project"] %}
{% set deployment = env["deployment"] %}
{% set region = path_utils.zoneToRegion(properties["zone"]) %}
{% set zone = properties["zone"] %}
{% set machineType = properties["machineType"] %}
{% set bootDiskType = properties["bootDiskType"] %}

{% set enableRegionalGKECluster = "Regional" if properties["enableRegionalGKECluster"] else "Zonal" %}
{% set gkeMachineType = properties["gkeMachineType"] %}
{% set maxNodePerZone = properties["maxNodePerZone"] %}
{% set diskSizeGb = properties["diskSizeGb"] %}

{% set boomiUserEmailID = properties["boomiUserEmailID"] %}
{% set boomiPassword = properties["boomiPassword"] %}
{% set boomiAccountID = properties["boomiAccountID"] %}
{% set helmGITRepoURL = properties["helmGITRepoURL"] %}

{% set subnetCidrOne = properties["subnetCidrOne"] %}
{% set subnetCidrTwo = properties["subnetCidrTwo"] %}

{% set network = env["deployment"] + "-gke-vpc" %}
{% set vmSubetworkName = env["deployment"] + "-" + path_utils.zoneToRegion(properties["zone"]) + "-vm-subnet" %}
{% set gkeSubetworkName = env["deployment"] + "-" + path_utils.zoneToRegion(properties["zone"]) + "-gke-subnet" %}

{% set externalIPs = properties["externalIP"] %}
{% set bootDiskType = properties["bootDiskType"] %}
{% set bootDiskSizeGb = properties["bootDiskSizeGb"] %}

resources:

- name: {{ deployment }}-static-ip
  type: static_address.py

- name: {{ deployment }}-bastion-sa
  type: iam.v1.serviceAccount
  properties:
    accountId: {{ deployment }}-bastion
    projectId: {{ project }}
    displayName: Bastion Service Account

- name: {{ deployment }}-gke-sa
  type: iam.v1.serviceAccount
  properties:
    accountId: {{ deployment }}-gke-cluster
    projectId: {{ project }}
    displayName: GKE Cluster Service Account

- name: {{ deployment }}-enableApis
  type: apis.py
  properties:
    consumerId: {{ 'project:' + env['project'] }}
    apis:
      - name: cloudResourceManagerApi
        serviceName: cloudresourcemanager.googleapis.com
      - name: endpointsApi
        serviceName: endpoints.googleapis.com
      - name: iamApi
        serviceName: iam.googleapis.com
      - name: containerApi
        serviceName: container.googleapis.com
      - name: gkeconnectApi
        serviceName: gkeconnect.googleapis.com
      - name: computeApi
        serviceName: compute.googleapis.com
      - name: computeIgmApi
        serviceName: replicapool.googleapis.com
      - name: CloudBuildApi
        serviceName: cloudbuild.googleapis.com
      - name: secretApi
        serviceName: secretmanager.googleapis.com

- name: {{ deployment }}-iam-member
  type: iam_member.py
  properties:
    roles:
      - role: roles/container.admin
        members:
          - "serviceAccount:$(ref.{{ deployment }}-bastion-sa.email)"
          - "serviceAccount:$(ref.{{ deployment }}-gke-sa.email)"
          - {{ 'serviceAccount:' + env['project_number'] + '@cloudbuild.gserviceaccount.com' }}
      - role: roles/container.clusterAdmin
        members:
          - {{ 'serviceAccount:' + env['project_number'] + '@cloudbuild.gserviceaccount.com' }}
          - "serviceAccount:$(ref.{{ deployment }}-bastion-sa.email)"
          - "serviceAccount:$(ref.{{ deployment }}-gke-sa.email)"
      - role: roles/compute.instanceAdmin
        members:
          - "serviceAccount:$(ref.{{ deployment }}-bastion-sa.email)"
          - "serviceAccount:$(ref.{{ deployment }}-gke-sa.email)"
      - role: roles/storage.admin
        members:
          - "serviceAccount:$(ref.{{ deployment }}-bastion-sa.email)"
          - "serviceAccount:$(ref.{{ deployment }}-gke-sa.email)"
      - role: roles/secretmanager.secretAccessor
        members:
          - {{ 'serviceAccount:' + env['project_number'] + '@cloudbuild.gserviceaccount.com' }}
      - role: roles/editor
        members:
          - {{ 'serviceAccount:' + env['project_number'] + '@cloudbuild.gserviceaccount.com' }}

- name: {{ deployment }}-network
  type: network.py
  properties:
    name: {{ network }}
    autoCreateSubnetworks: false
    subnetworks:
      - name: {{ vmSubetworkName }}
        region: {{ region }}
        ipCidrRange: {{ subnetCidrOne }}
        privateIpGoogleAccess: true
        enableFlowLogs: false
      - name: {{ gkeSubetworkName }}
        region: {{ region }}
        ipCidrRange: {{ subnetCidrTwo }}
        privateIpGoogleAccess: true
        enableFlowLogs: false

- name: {{ deployment }}-cloud-nat-router
  type: cloud_router.py
  properties:
    name: {{ deployment }}-cloud-nat-router
    network: {{ network }}
    region: {{ region }}
    nats:
      - name: {{ deployment }}-cloud-nat
        sourceSubnetworkIpRangesToNat: LIST_OF_SUBNETWORKS
        natIpAllocateOption: AUTO_ONLY
        subnetworks:
          - name: $(ref.subnetwork-2.selfLink)

- name: {{ deployment }}-firewall
  type: firewall.py
  properties:
    network: {{ network }}
    rules:
      - name: {{ deployment }}-allow-ssh-to-bastion
        description: Allow SSH from anywhere to Bastion
        allowed:
          - IPProtocol: tcp
            ports:
              - "22"
              - "3389"
        direction: INGRESS
        sourceRanges:
          - 0.0.0.0/0
        targetTags:
          - bastion
      {% if properties["enableTcp80"] %}
      - name: {{ deployment }}-allow-http
        description: Allow HTTP/HTTPS from anywhere
        allowed:
          - IPProtocol: tcp
            ports:
              - "80"
        direction: INGRESS
        {% if properties.get("tcp80SourceRanges") %}
        sourceRanges:
          {% for source in properties["tcp80SourceRanges"].split(',') %}
          - '{{ source | trim }}'
          {% endfor %}
        {% else %}
        sourceRanges:
          - 0.0.0.0/0
        {% endif %}
      {% endif %}
      {% if properties["enableTcp443"] %}
      - name: {{ deployment }}-allow-https
        description: Allow HTTP/HTTPS from anywhere
        allowed:
          - IPProtocol: tcp
            ports:
              - "443"
        direction: INGRESS
        {% if properties.get("tcp443SourceRanges") %}
        sourceRanges:
          {% for source in properties["tcp443SourceRanges"].split(',') %}
          - '{{ source | trim }}'
          {% endfor %}
        {% else %}
        sourceRanges:
          - 0.0.0.0/0
        {% endif %}
      {% endif %}
      - name: {{ deployment }}-out-https
        description: Allow HTTP/HTTPS from anywhere
        allowed:
          - IPProtocol: tcp
            ports:
              - "443"
        direction: EGRESS
        destinationRanges:
          - 0.0.0.0/0
      - name: {{ deployment }}-allow-icmp
        description: Allow ICMP from anywhere
        allowed:
          - IPProtocol: ICMP
        direction: INGRESS
        sourceRanges:
          - 0.0.0.0/0